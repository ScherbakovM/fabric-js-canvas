import '../scss/style.scss';
import '../scss/right-menu.scss';
import '../scss/menu.scss';
import '../scss/text-menu.scss';
import '../scss/shape-menu.scss';
import '../scss/arrow-menu.scss';
import { fabric } from 'fabric';
import 'fabric-history';
import { elements, shapeFillPicker, shapeMenu, heightValue, widthValue } from './variables';



//^ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ –¥–ª—è copy paste
var _clipboard;
//^ –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã context –º–µ–Ω—é –≤–æ –≤—Ä–µ–º—è –≤—ã–∑–æ–≤–∞
var contextMenuClick;

var initialPointer;
//^–§–∏–≥—É—Ä—ã –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
let text, line, arrow, square, ellipse, rhombus, triangle, targetElem;

//^ –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–∞–Ω–≤–∞—Å fabric
export const canvas = new fabric.Canvas('canvas', {
    width: window.innerWidth,
    // backgroundColor: '#e6f7ea', //'#f5f5f5'
    height: window.innerHeight,
    stateful: true,
    imageSmoothingEnabled: true,
});

let brushSize = parseInt(elements.brush_size_input.value);
let brushColor = elements.brush_picker.color.toHex();


loadListeners();


//&contextMenu 
document.addEventListener('contextmenu', (e) => {
    e.preventDefault();
    canvas.isDrawingMode = false;

    if (e.target.classList.value != 'upper-canvas canvas') {
        return
    }
    elements.context_menu.style.left = e.clientX + 'px';
    elements.context_menu.style.top = e.clientY + 'px';
    elements.context_menu.classList.toggle('visible');
    contextMenuClick = { x: e.clientX, y: e.clientY };

    var pointer = canvas.getPointer(e); // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–ª–∏–∫–∞
    var objects = canvas.getObjects(); // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã –Ω–∞ —Ö–æ–ª—Å—Ç–µ

    for (var i = 0; i < objects.length; i++) {
        if (objects[i].containsPoint(pointer)) { // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –æ–±—ä–µ–∫—Ç —Ç–æ—á–∫—É –∫–ª–∏–∫–∞
            targetElem = objects[i];
            console.log(targetElem)
            if (targetElem.type === 'group') {
                var objectsInGroup = targetElem.getObjects();
                console.log(objectsInGroup);
            }
        }
    }
});

//^ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ corner (–º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–∞–º–∏);
fabric.Object.prototype.transparentCorners = false; //^ –û—Ç–∫–ª—é—á–∞–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —É–≥–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ
fabric.Object.prototype.cornerColor = '#ffffff'; //^ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ü–≤–µ—Ç —É–≥–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ –≤ —Å–∏–Ω–∏–π —Ü–≤–µ—Ç
fabric.Object.prototype.cornerSize = 10; //^ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —É–≥–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ —Ä–∞–≤–Ω—ã–º 10
fabric.Object.prototype.cornerStyle = 'circle'; //^ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å—Ç–∏–ª—å —É–≥–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –æ–±—ä–µ–∫—Ç–æ–≤ –Ω–∞ —Ö–æ–ª—Å—Ç–µ –≤ –≤–∏–¥–µ –∫—Ä—É–≥–∞
fabric.Object.prototype.cornerStrokeColor = "#228eff";
fabric.Object.prototype.borderColor = "#228eff";
fabric.Object.prototype.objectCaching = false;
fabric.ActiveSelection.prototype.cornerColor = '#ffffff';
fabric.ActiveSelection.prototype.padding = 10;
canvas.selectionBorderColor = '#228eff'; //^ —Ü–≤–µ—Ç selection
canvas.selectionColor = 'transparent';


window.addEventListener('resize', resizeCanvas) //* Resize –∫–∞–Ω–≤–∞—Å 
elements.cursor.addEventListener('click', loadListeners); //* –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è ZOOM + DRAG
elements.delete_icon.addEventListener('click', deleteObject); //* –£–¥–∞–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ DEL
elements.draw.addEventListener('click', drawBrush)
elements.arrow.addEventListener('click', drawArrow); //* —Ä–∏—Å—É–µ–º ->
elements.rect.addEventListener('click', drawRect); //* —Ä–∏—Å—É–µ–º ‚¨ú 
elements.text.addEventListener('click', addText); //* –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
elements.circle.addEventListener('click', drawCircle); //* —Ä–∏—Å—É–µ–º üîµ 
elements.rhombus.addEventListener('click', drawRhombus);//* —Ä–∏—Å—É–µ–º üîπ
elements.triangle.addEventListener('click', drawTriangle);
elements.step_back.addEventListener('click', stepBack);
elements.step_forward.addEventListener('click', stepForward);
elements.lock_unlock.addEventListener('click', toggleBlockActiveObject);//* –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—å–µ–∫—Ç–∞

elements.group.addEventListener('click', groupObject);
elements.ungroup.addEventListener('click', ungroupObject);
elements.copy.addEventListener('click', cloneObject);
elements.paste.addEventListener('click', pasteObject);
elements.delete.addEventListener('click', deleteObject);
elements.brush_size_input.addEventListener('change', changeSizeBrush);
elements.brush_picker.addEventListener('change', changeColorBrush);
shapeFillPicker.addEventListener('change', changeFill);
elements.arrow_slider.addEventListener('input', changeArrowWidth)

//& —Ä–∞–∑–º–µ—Ä –∫–∏—Å—Ç–∏
function changeSizeBrush() {
    if (canvas.isDrawingMode) {
        canvas.isDrawingMode = false;
        brushSize = parseInt(elements.brush_size_input.value);
        drawBrush();
    } else {
        stopDrawEvent();
        brushSize = parseInt(elements.brush_size_input.value);
    }
}

//& —Ü–≤–µ—Ç –∫–∏—Å—Ç–∏ 
function changeColorBrush(e) {
    const color = e.detail.hex8;
    if (canvas.isDrawingMode) {
        canvas.isDrawingMode = false;
        brushColor = color;
        drawBrush();
    } else {
        stopDrawEvent();
        brushColor = color;
    }
}

function changeArrowWidth() {
    const width = elements.arrow_slider.value;
    const objects = canvas.getActiveObjects();

    if (width < 1) {
        return
    }
    // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–º—É –æ–±—ä–µ–∫—Ç—É
    for (var i = 0; i < objects.length; i++) {
        var object = objects[i];

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–±—ä–µ–∫—Ç —Å—Ç—Ä–µ–ª–∫–æ–π
        if (object.id === 'single-arrow') {
            // –ï—Å–ª–∏ –¥–∞, —Ç–æ –º–µ–Ω—è–µ–º –º–∞—Å—à—Ç–∞–± –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ
            object.scaleX = width,
            object.scaleY = width
            canvas.requestRenderAll();
        }
    }

    // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
    
}

//& –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ñ–æ–Ω –¥–ª—è –∫–∞–Ω–≤–∞—Å–∞
function createSvgBackground() {
    var width = canvas.getWidth();
    var height = canvas.getHeight();
    // –°–æ–∑–¥–∞–µ–º SVG-—ç–ª–µ–º–µ–Ω—Ç
    var svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    svg.setAttribute("width", width);
    svg.setAttribute("height", height);

    // –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–∏
    for (var i = 20; i < width; i += 50) {
        for (var j = 10; j < height; j += 50) {
            var circle = document.createElementNS("http://www.w3.org/2000/svg", "circle");
            circle.setAttribute("cx", i);
            circle.setAttribute("cy", j);
            circle.setAttribute("r", 1);
            circle.setAttribute("opacity", 1)
            circle.setAttribute("fill", "#aaabac");
            circle.setAttribute('imageSmoothing', 'true');
            svg.appendChild(circle);
        }
    }

    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º SVG –≤ —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –µ–≥–æ –∫–∞–∫ —Ñ–æ–Ω —Ö–æ–ª—Å—Ç–∞
    var svgString = new XMLSerializer().serializeToString(svg);
    var svgDataUrl = 'data:image/svg+xml;base64,' + btoa(svgString);

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é CSS, –∞ –Ω–µ —Å –ø–æ–º–æ—â—å—é Fabric.js
    canvas.getElement().style.backgroundImage = 'url(' + svgDataUrl + ')';

}

createSvgBackground();

//& –†–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ canvas
function resizeCanvas() {
    canvas.setWidth(window.innerWidth);
    canvas.setHeight(window.innerHeight);
    canvas.calcOffset();
    createSvgBackground(canvas);
    canvas.renderAll();
}


function stepBack() {
    canvas.undo();
    // canvas.forEachObject(function(object) {
    //     if (object.type === 'group' || object.type === 'activeSelection') {
    //         object.getObjects().forEach(function(groupObject) {
    //             groupObject.objectCaching = false;
    //         });
    //     } else {
    //         object.objectCaching = false;
    //     }
    // });
    // canvas.renderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
}

function stepForward() {
    canvas.redo();
}

//& –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
function loadListeners() {
    stopDrawEvent();
    //–ü–µ—Ä–µ—Ç–∞—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞
    canvas.on('mouse:down', setDragCanvas);
    //–ö–ª–∏–∫ –ø–æ –∫–∞–Ω–≤–∞—Å—É —Å–æ –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –¥—Ä–∞–≥ —Ä–µ–∂–∏–º–æ–º
    canvas.on('mouse:move', clickInDragingCanvas);
    canvas.on('mouse:up', mouseUpDragingCanvas);
    canvas.on('mouse:wheel', zoomCanvas);
}

//? –û—á–∏—â–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏
function clearListeners() {
    canvas.off('mouse:wheel');
    canvas.off('mouse:down');
    canvas.off('mouse:move');
}


//& –ü–µ—Ä–µ–¥–∏–≤–∂–µ–Ω–∏–µ —Ö–æ–ª—Å—Ç–∞ alt + mouse down DEFAULT MODE
function setDragCanvas(opt) {

    var evt = opt.e;
    if (evt.altKey === true) {
        this.isDragging = true;
        this.selection = false;
        this.lastPosX = evt.clientX;
        this.lastPosY = evt.clientY;
    }
}

//& 
function clickInDragingCanvas(opt) {
    if (this.isDragging) {
        var e = opt.e;
        var vpt = this.viewportTransform;
        vpt[4] += e.clientX - this.lastPosX;
        vpt[5] += e.clientY - this.lastPosY;
        this.requestRenderAll();
        this.lastPosX = e.clientX;
        this.lastPosY = e.clientY;
    }
}


function mouseUpDragingCanvas(opt) {
    // on mouse up we want to recalculate new interaction
    // for all objects, so we call setViewportTransform
    this.setViewportTransform(this.viewportTransform);
    this.isDragging = false;
    this.selection = true;
}

//& Zoom canvas
function zoomCanvas(opt) {
    canvas.discardActiveObject();
    var delta = opt.e.deltaY;
    var zoom = canvas.getZoom();
    zoom *= 0.9998 ** delta;
    if (zoom > 20) zoom = 20;
    if (zoom < 0.1) zoom = 0.1;
    canvas.zoomToPoint({ x: opt.e.offsetX, y: opt.e.offsetY }, zoom);
    opt.e.preventDefault();
    opt.e.stopPropagation();

}


let drawMode = false;


function selectionOn() {
    canvas.forEachObject(function (object) {
        object.set('selectable', true);
    });
}

//& –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—å–µ–∫—Ç–æ–≤
function groupObject() {
    if (!canvas.getActiveObject()) {
        return;
    }
    if (canvas.getActiveObject().type !== 'activeSelection') {
        return;
    }

    canvas.getActiveObject().toGroup();
    selectionOn();
    canvas.getActiveObject().set('objectCaching', false);
    canvas.renderAll();
}


//& –†–∞–∑–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ–±—å–µ–∫—Ç–æ–≤
function ungroupObject() {
    if (!canvas.getActiveObject()) {
        return;
    }
    if (canvas.getActiveObject().type !== 'group') {
        return;
    }
    canvas.getActiveObject().toActiveSelection();
    canvas.requestRenderAll();
    canvas.discardActiveObject();
}

//& –°–æ–∑–¥–∞—ë—Ç –∫–æ–ø–∏—é –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—å–µ–∫—Ç–∞
function cloneObject() {
    const activObj = canvas.getActiveObject()
    if (activObj) {
        activObj.clone(function (cloned) {
            _clipboard = cloned;
        })
    }
}

//& –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é
function pasteObject() {
    _clipboard.clone(function (clonedObj) {
        clonedObj.set({
            left: contextMenuClick.x,
            top: contextMenuClick.y,
            evented: true,
            objectCaching: false,
        });
        if (clonedObj.type === 'activeSelection' || clonedObj.type === 'group') {
            clonedObj.canvas = canvas;
            clonedObj.forEachObject(function (obj) {
                obj.set('objectCaching', false); // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ objectCaching –≤ false –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
                canvas.add(obj);
            });
            clonedObj.setCoords();
        } else {
            canvas.add(clonedObj);
        }
        canvas.setActiveObject(clonedObj);
        canvas.requestRenderAll();
    });
}


//& –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª—è–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ 
function addText() {
    stopDrawEvent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    canvas.defaultCursor = 'crosshair'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏—è
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
        'mouse:down': addingTextMouseDown,
        'mouse:move': drawingTextOnMouseMove,
        'mouse:up': stopDrawingTextOnMouseUp,
    })

}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ ->
function drawArrow() {
    stopDrawEvent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    canvas.defaultCursor = 'crosshair'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏—è
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
        'mouse:down': addingArrowMouseDown,
        'mouse:move': drawingArrowOnMouseMove,
        'mouse:up': stopDrawingArrowOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ + ‚¨ú 
function drawRect() {
    stopDrawEvent(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç–µ–∫—É—â–∏–µ —Å–æ–±—ã—Ç–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    canvas.defaultCursor = 'crosshair'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –≤–∏–¥–µ –ø–µ—Ä–µ–∫—Ä–µ—Å—Ç–∏—è
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        'mouse:down': addingRectMouseDown,
        'mouse:move': drawingRectOnMouseMove,
        'mouse:up': stopDrawingRectOnMouseUp,
    })

}

//& –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–∞  + üîµ 
function drawCircle() {
    stopDrawEvent();
    canvas.defaultCursor = 'crosshair';
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–∞
        'mouse:down': addingEllipseMouseDown,
        'mouse:move': drawingEllipseOnMouseMove,
        'mouse:up': stopDrawingEllipseOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–æ–º–±–∞
function drawRhombus() {
    stopDrawEvent();
    canvas.defaultCursor = 'crosshair';
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–∞
        'mouse:down': addingRhombusMouseDown,
        'mouse:move': drawingRhombusOnMouseMove,
        'mouse:up': stopDrawingRhombusOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
function drawTriangle() {
    stopDrawEvent();
    canvas.defaultCursor = 'crosshair';
    canvas.on({ // –ù–∞–∑–Ω–∞—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏ –¥–ª—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –∫—Ä—É–≥–∞
        'mouse:down': addingTriangleMouseDown,
        'mouse:move': drawingTriangleOnMouseMove,
        'mouse:up': stopDrawingTriangleOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ->
function addingArrowMouseDown() {
    canvas.selection = false; // –û—Ç–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    drawMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
    let linePath = 'M ' + pointer.x + ' ' + pointer.y + ' L ' + pointer.x + ' ' + pointer.y; // –°–æ–∑–¥–∞–µ–º –ø—É—Ç—å –¥–ª—è –ª–∏–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏
    line = new fabric.Path(linePath, { // –°–æ–∑–¥–∞–µ–º –ª–∏–Ω–∏—é —Å—Ç—Ä–µ–ª–∫–∏
        stroke: 'black',
        strokeWidth: 3,
        strokeLineCap: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ü–∞–º –ª–∏–Ω–∏–∏
        strokeLineJoin: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –ª–∏–Ω–∏–∏
        originX: 'center',
        originY: 'center',
        hasControls: false,
        hasBorders: false,
        objectCaching: false,
    });

    let arrowHeadPath = 'M ' + pointer.x + ' ' + pointer.y + ' L ' + (pointer.x - 10) + ' ' + (pointer.y - 10) + ' M ' + pointer.x + ' ' + pointer.y + ' L ' + (pointer.x + 10) + ' ' + (pointer.y - 10);

    arrow = new fabric.Path(arrowHeadPath, { // –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ–≤—É —Å—Ç—Ä–µ–ª–∫–∏
        label: 'arrow-line',
        fillWidth: 0,
        stroke: 'black',
        strokeWidth: 3,
        originX: 'center',
        originY: 'center',
        hasControls: false,
        hasBorders: false,
        strokeLineCap: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ü–∞–º –ª–∏–Ω–∏–∏
        strokeLineJoin: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –ª–∏–Ω–∏–∏
        top: pointer.y,
        left: pointer.x,
        angle: 180,
        objectCaching: false,
        selectable: false,
    })

    canvas.add(line); // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏–Ω–∏—é –Ω–∞ —Ö–æ–ª—Å—Ç
    canvas.add(arrow); // –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–ª–æ–≤—É —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞ —Ö–æ–ª—Å—Ç
}


//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –ø–æ–ª–æ–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ ->

function drawingArrowOnMouseMove() {
    if (drawMode === true) { // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏

        line.path[1][1] = pointer.x; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –ª–∏–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ –æ—Å–∏ X
        line.path[1][2] = pointer.y; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–µ—á–Ω—É—é —Ç–æ—á–∫—É –ª–∏–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ –æ—Å–∏ Y
        line.setCoords(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–∏–Ω–∏–∏

        let angle = Math.atan2(pointer.y - line.path[0][2], pointer.x - line.path[0][1]); // –í—ã—á–∏—Å–ª—è–µ–º —É–≥–æ–ª –º–µ–∂–¥—É –Ω–∞—á–∞–ª—å–Ω–æ–π –∏ –∫–æ–Ω–µ—á–Ω–æ–π —Ç–æ—á–∫–∞–º–∏ –ª–∏–Ω–∏–∏
        angle *= 180 / Math.PI; // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å—ã

        arrow.left = pointer.x - line.strokeWidth / 2 * Math.cos(angle * Math.PI / 180); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ –æ—Å–∏ X
        arrow.top = pointer.y - line.strokeWidth / 2 * Math.sin(angle * Math.PI / 180); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–µ –≥–æ–ª–æ–≤—ã —Å—Ç—Ä–µ–ª–∫–∏ –ø–æ –æ—Å–∏ Y
        arrow.angle = angle - 90; // –ü—Ä–∏–º–µ–Ω—è–µ–º —É–≥–æ–ª –∫ –≥–æ–ª–æ–≤–µ —Å—Ç—Ä–µ–ª–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º 90 –≥—Ä–∞–¥—É—Å–æ–≤

        arrow.setCoords(); // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≥–æ–ª–æ–≤—ã —Å—Ç—Ä–µ–ª–∫–∏

        canvas.requestRenderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    }
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ->
function stopDrawingArrowOnMouseUp() {
    drawMode = false; // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è

    let updatedLinePath = line.path; // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—É—Ç—å –ª–∏–Ω–∏–∏ —Å—Ç—Ä–µ–ª–∫–∏

    canvas.remove(line); // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –ª–∏–Ω–∏—é —Å—Ç—Ä–µ–ª–∫–∏ —Å —Ö–æ–ª—Å—Ç–∞

    line = new fabric.Path(updatedLinePath, { // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ª–∏–Ω–∏—é —Å—Ç—Ä–µ–ª–∫–∏
        id: 'added-line',
        label: 'arrow-line',
        stroke: 'black',
        strokeWidth: 3,
        strokeLineCap: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ –∫–æ–Ω—Ü–∞–º –ª–∏–Ω–∏–∏
        strokeLineJoin: 'round', // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º –ª–∏–Ω–∏–∏
        originX: 'center',
        originY: 'center',
        hasControls: false,
        hasBorders: false,
        objectCaching: false,
        selectable: false,
    });

    canvas.add(line); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ª–∏–Ω–∏—é –Ω–∞ —Ö–æ–ª—Å—Ç

    let obj = []; // –°–æ–∑–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤ —Å—Ç—Ä–µ–ª–∫–∏
    canvas.getObjects().forEach(function (shape) { // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        if (shape.label === 'arrow-line') { // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å—Ç—Ä–µ–ª–∫–∏
            obj.push(shape); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤
        }
    });

    obj = obj.reverse(); // –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤, —á—Ç–æ–±—ã –≥–æ–ª–æ–≤–∞ —Å—Ç—Ä–µ–ª–∫–∏ –±—ã–ª–∞ —Å–≤–µ—Ä—Ö—É

    let singleArrow = new fabric.Group(obj, { // –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—É –¥–ª—è —Å—Ç—Ä–µ–ª–∫–∏
        id: 'single-arrow',
        originX: 'center',
        originY: 'center',
        hasControls: false,
        hasBorders: false,
        objectCaching: false,
        selectable: false,
        padding: 20
    })

    canvas.remove(line, arrow) // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—ä–µ–∫—Ç—ã —Å—Ç—Ä–µ–ª–∫–∏ —Å —Ö–æ–ª—Å—Ç–∞
    canvas.add(singleArrow); // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –Ω–∞ —Ö–æ–ª—Å—Ç
    singleArrow.on('mousedown', showArrowMenu);
    canvas.requestRenderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    stopDrawArrow();
    loadListeners();
}


//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–Ω—ã—Ö –æ–±—ä–µ–∫—Ç–æ–≤ DELETE
function deleteObject() {
    shapeMenu.classList.remove('active_shape');
    const activeObjects = canvas.getActiveObjects(); // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã
    activeObjects.forEach(function (object) {
        canvas.remove(object); // –£–¥–∞–ª—è–µ–º –∫–∞–∂–¥—ã–π –≤—ã–¥–µ–ª–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç
    });
    canvas.discardActiveObject().renderAll(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üñ±Ô∏è 
function addingTextMouseDown() {
    let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
    drawMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    text = new fabric.IText('', { // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç
        left: pointer.x,
        top: pointer.y,
        fontSize: 1,
        fontSizeMult: 1,
        textAlign: 'left',
        fontFamily: 'Arial',
        statefullCache: true,
        splitByGrapheme: true,
        strokeUniform: true,
        objectCaching: false,
    });

    canvas.add(text); // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Ö–æ–ª—Å—Ç
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –º—ã—à–∏ üñ±Ô∏è 
function drawingTextOnMouseMove() {
    if (drawMode === true) { // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
        let fontSize = Math.sqrt(Math.pow(pointer.x - text.left, 2) + Math.pow(pointer.y - text.top, 2)) / 4;
        text.set({ fontSize: fontSize }); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞

        // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
        let width = Math.abs(pointer.x - text.left);
        let height = Math.abs(pointer.y - text.top);

        text.set({ width: width, height: height }); // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞

        canvas.requestRenderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    }
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üñ±Ô∏è 
function stopDrawingTextOnMouseUp() {
    drawMode = false; // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    text.setControlsVisibility({
        mt: false, // –≤–µ—Ä—Ö–Ω—è—è —Ç–æ—á–∫–∞
        mb: false,
        ml: false,
        mr: false
    });

    canvas.setActiveObject(text);
    canvas.renderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    stopDrawingText();
    loadListeners();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚¨ú 
function addingRectMouseDown() {
    let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
    drawMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    square = new fabric.Rect({ // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        id: 'shape',
        left: pointer.x,
        top: pointer.y,
        fill: 'white',
        width: 0,
        height: 0,
        originX: 'left',
        originY: 'top',
        selectable: true,
        hasControls: true,
        strokeUniform: true,
        hasBorders: true,
        objectCaching: false,
    });

    canvas.add(square); // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–∞ —Ö–æ–ª—Å—Ç
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ ‚¨ú 
function drawingRectOnMouseMove() {
    if (drawMode === true) { // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏

        square.set({ width: Math.abs(pointer.x - square.left), height: Math.abs(pointer.y - square.top) }); // –û–±–Ω–æ–≤–ª—è–µ–º —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞

        if (pointer.x < square.left) {
            square.set({ originX: 'right' });
        } else {
            square.set({ originX: 'left' });
        }

        if (pointer.y < square.top) {
            square.set({ originY: 'bottom' });
        } else {
            square.set({ originY: 'top' });
        }

        canvas.requestRenderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    }
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚¨ú 
function stopDrawingRectOnMouseUp() {
    drawMode = false; // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    canvas.remove(square);
    canvas.add(square);
    square.on('mousedown', showShapeMenu);
    canvas.renderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    canvas.setActiveObject(square);
    stopDrawingRect();
    loadListeners();
}


//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —ç–ª–ª–∏–ø—Å–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üîµ 
function addingEllipseMouseDown() {
    let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏
    drawMode = true; // –í–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    ellipse = new fabric.Ellipse({ // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–ª–∏–ø—Å
        id: 'shape',
        left: pointer.x,
        top: pointer.y,
        fill: 'white',
        rx: 0, // –†–∞–¥–∏—É—Å –ø–æ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
        ry: 0, // –†–∞–¥–∏—É—Å –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏ —Ä–∞–≤–µ–Ω –Ω—É–ª—é
        originX: 'left',
        originY: 'top',
        stroke: '#228eff',
        strokeWidth: 1,
        selectable: true,
        hasControls: true,
        strokeUniform: true,
        hasBorders: true,
        objectCaching: false,
        centeredScaling: false,
        activeObjects: true
    });

    canvas.add(ellipse); // –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–ª–∏–ø—Å –Ω–∞ —Ö–æ–ª—Å—Ç
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —ç–ª–ª–∏–ø—Å–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ üîµ 
function drawingEllipseOnMouseMove() {
    if (drawMode === true) { // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
        let pointer = canvas.getPointer(); // –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —É–∫–∞–∑–∞—Ç–µ–ª—è –º—ã—à–∏

        ellipse.set({ rx: Math.abs(pointer.x - ellipse.left) / 2, ry: Math.abs(pointer.y - ellipse.top) / 2 }); // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞–¥–∏—É—Å—ã —ç–ª–ª–∏–ø—Å–∞

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å –∫–∞–∫–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –æ—Ç —Ü–µ–Ω—Ç—Ä–∞ —ç–ª–ª–∏–ø—Å–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è —É–∫–∞–∑–∞—Ç–µ–ª—å –º—ã—à–∏ –∏ –º–µ–Ω—è–µ–º —Å–≤–æ–π—Å—Ç–≤–∞ originX –∏ originY —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ
        if (pointer.x < ellipse.left) {
            ellipse.set({ originX: 'right' });
        } else {
            ellipse.set({ originX: 'left' });
        }

        if (pointer.y < ellipse.top) {
            ellipse.set({ originY: 'bottom' });
        } else {
            ellipse.set({ originY: 'top' });
        }

        canvas.requestRenderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    }
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —ç–ª–ª–∏–ø—Å–∞ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üîµ 
function stopDrawingEllipseOnMouseUp() {
    drawMode = false; // –í—ã–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º —Ä–∏—Å–æ–≤–∞–Ω–∏—è
    canvas.remove(ellipse);
    ellipse.set({
        strokeWidth: 0
    })
    ellipse.on('mousedown', showShapeMenu);
    canvas.add(ellipse);
    canvas.renderAll(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ö–æ–ª—Å—Ç
    stopDrawingEllipse();
    loadListeners();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–æ–º–±–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üîπ 

function addingRhombusMouseDown() {
    let pointer = canvas.getPointer();
    drawMode = true;
    initialPointer = { x: pointer.x, y: pointer.y }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    rhombus = new fabric.Polygon([{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }], {
        left: pointer.x,
        top: pointer.y,
        fill: 'white',
        originX: 'center', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 'center'
        originY: 'center', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 'center'
        selectable: true,
        hasControls: true,
        stroke: '#228eff',
        strokeWidth: 1,
        strokeUniform: true,
        hasBorders: true,
        objectCaching: false,
    });
    canvas.add(rhombus);
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ä–æ–º–±–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ üîπ 

function drawingRhombusOnMouseMove() {
    if (drawMode === true) {
        let pointer = canvas.getPointer();

        let width = Math.abs(pointer.x - initialPointer.x);
        let height = Math.abs(pointer.y - initialPointer.y);

        rhombus.set({
            points: [
                { x: -width / 2, y: 0 },
                { x: 0, y: -height / 2 },
                { x: width / 2, y: 0 },
                { x: 0, y: height / 2 }
            ],
            width: width,
            height: height,
            left: Math.min(pointer.x, initialPointer.x) + width / 2,
            top: Math.min(pointer.y, initialPointer.y) + height / 2,
        });
    }
    canvas.requestRenderAll();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ä–æ–º–±–∞ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ üîπ  

function stopDrawingRhombusOnMouseUp() {
    drawMode = false;
    let pointer = canvas.getPointer();
    let width = Math.abs(pointer.x - initialPointer.x);
    let height = Math.abs(pointer.y - initialPointer.y);

    canvas.remove(rhombus);
    rhombus.set({
        id: 'shape',
        width: width,
        height: height,
        strokeWidth: 0,
    })
    rhombus.on('mousedown', showShapeMenu);
    canvas.add(rhombus);
    canvas.renderAll();
    stopDrawingRhombus();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚ñ≥

function addingTriangleMouseDown() {
    let pointer = canvas.getPointer();
    drawMode = true;
    initialPointer = { x: pointer.x, y: pointer.y }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
    triangle = new fabric.Polygon([{ x: 0, y: 0 }, { x: 0, y: 0 }, { x: 0, y: 0 }], {
        id: 'shape',
        left: pointer.x,
        top: pointer.y,
        fill: 'white',
        originX: 'center', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 'center'
        originY: 'center', // –ò–∑–º–µ–Ω—è–µ–º –Ω–∞ 'center'
        selectable: true,
        hasControls: true,
        stroke: '#228eff',
        strokeWidth: 1,
        strokeUniform: true,
        hasBorders: true,
        objectCaching: false,
        centeredRotation: true,
        centeredScaling: true
    });
    canvas.add(triangle);
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –¥–≤–∏–∂–µ–Ω–∏–∏ –º—ã—à–∏ ‚ñ≥

function drawingTriangleOnMouseMove() {
    if (drawMode === true) {
        let pointer = canvas.getPointer();

        let width = Math.abs(pointer.x - initialPointer.x);
        let height = Math.abs(pointer.y - initialPointer.y);

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
        let directionY = (pointer.y - initialPointer.y) >= 0 ? 1 : -1;

        triangle.set({
            points: [
                { x: -width / 2, y: height / 2 * directionY },
                { x: width / 2, y: height / 2 * directionY },
                { x: 0, y: -height / 2 * directionY }
            ],
            width: width,
            height: height,
            left: Math.min(pointer.x, initialPointer.x) + width / 2,
            top: Math.min(pointer.y, initialPointer.y) + height / 2,
        });
    }
    canvas.requestRenderAll();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –ø—Ä–∏ –æ—Ç–ø—É—Å–∫–∞–Ω–∏–∏ –∫–Ω–æ–ø–∫–∏ –º—ã—à–∏ ‚ñ≥

function stopDrawingTriangleOnMouseUp() {
    drawMode = false;
    let pointer = canvas.getPointer();
    let width = Math.abs(pointer.x - initialPointer.x);
    let height = Math.abs(pointer.y - initialPointer.y);

    canvas.remove(triangle);
    triangle.set({
        width: width,
        height: height,
        strokeWidth: 0,
    })
    triangle.on('mousedown', showShapeMenu);
    canvas.add(triangle);
    canvas.renderAll();
    stopDrawingTriangle();
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ DELETE‚¨ú 
function stopDrawingRect() {
    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞
        'mouse:down': addingRectMouseDown,
        'mouse:move': drawingRectOnMouseMove,
        'mouse:up': stopDrawingRectOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª—é—á–∞—é—â–∞—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —ç–ª–ª–∏–ø—Å–∞ DELETEüîµ 
function stopDrawingEllipse() {
    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —ç–ª–ª–∏–ø—Å–∞
        'mouse:down': addingEllipseMouseDown,
        'mouse:move': drawingEllipseOnMouseMove,
        'mouse:up': stopDrawingEllipseOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è –æ—Ç–ª—é—á–∞—é—â–∞—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ä–æ–º–±–∞ üîπ  
function stopDrawingRhombus() {

    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —ç–ª–ª–∏–ø—Å–∞
        'mouse:down': addingRhombusMouseDown,
        'mouse:move': drawingRhombusOnMouseMove,
        'mouse:up': stopDrawingRhombusOnMouseUp,
    })
}

//& –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–∞—é—â–∞—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ ‚ñ≥
function stopDrawingTriangle() {

    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        'mouse:down': addingTriangleMouseDown,
        'mouse:move': drawingTriangleOnMouseMove,
        'mouse:up': stopDrawingTriangleOnMouseUp,
    })
};

//& –§—É–Ω–∫—Ü–∏—è –æ—Ç–∫–ª—é—á–∞—é—â–∞—è —Ä–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
function stopDrawingText() {

    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
        'mouse:down': addingTextMouseDown,
        'mouse:move': drawingTextOnMouseMove,
        'mouse:up': stopDrawingTextOnMouseUp,
    })
};

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∏—Å–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–µ–ª–æ–∫ ->
function stopDrawArrow() {
    canvas.defaultCursor = 'default'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫—É—Ä—Å–æ—Ä
    canvas.selection = true; // –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è –æ–±—ä–µ–∫—Ç–æ–≤
    canvas.off({ // –û—Ç–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –º—ã—à–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ä–∏—Å–æ–≤–∞–Ω–∏–µ–º —Å—Ç—Ä–µ–ª–æ–∫
        'mouse:down': addingArrowMouseDown,
        'mouse:move': drawingArrowOnMouseMove,
        'mouse:up': stopDrawingArrowOnMouseUp,
    })
    canvas.getObjects().forEach(function (shape) { // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–∞–º –Ω–∞ —Ö–æ–ª—Å—Ç–µ
        if (shape.id === 'single-arrow') { // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Ç—Ä–µ–ª–∫–æ–π
            shape.selectable = true; // –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
            shape.hasBorders = true; // –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞–Ω–∏—Ü —Å—Ç—Ä–µ–ª–∫–∏
            shape.hasControls = true; // –í–∫–ª—é—á–∞–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ —Å—Ç—Ä–µ–ª–∫–∏
            shape.hasRotatingPoint = true; // –í–∫–ª—é—á–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤—Ä–∞—â–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
            shape.transparentCorners = false;
            shape.cornerSize = 10;
            shape.cornerStyle = 'circle';
        }
    })
}

//& –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–±—ã—Ç–∏–π —Ä–∏—Å–æ–≤–∞–Ω–∏—è 
function stopDrawEvent() {
    stopDrawArrow();
    stopDrawingRect();
    stopDrawingEllipse();
    stopDrawingTriangle();
    canvas.isDrawingMode = false;
}


//& –§—É–Ω–∫—Ü–∏—è —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Ä–∏—Å–æ–≤–∞–Ω–∏—è
function drawBrush() {
    canvas.discardActiveObject().renderAll();
    canvas.isDrawingMode = true;
    if (canvas.isDrawingMode) {
        canvas.off('mouse:down')
        const brush = canvas.freeDrawingBrush;
        brush.color = brushColor;
        brush.width = brushSize;
    }
}

//& save object svg
function saveObject() {
    var obj = canvas.getActiveObject();
    var svg = obj.toSVG();
    var blob = new Blob([svg], { type: "image/svg+xml;charset=utf-8" });
    var url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = "my-svg.svg";
    link.click();
    canvas.renderAll();
}


//–ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏—è –æ–±—å–µ–∫—Ç–∞ (–ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–µ –ø–æ –∫–∞–Ω–≤–∞—Å, scaling)
canvas.on('object:modified', function (e) {
    var modifiedObject = e.target;

    if (modifiedObject.id === 'shape') {
        shapeFillPicker.color = modifiedObject.fill;
        var width = modifiedObject.width * modifiedObject.scaleX;
        var height = modifiedObject.height * modifiedObject.scaleY;
        widthValue.innerText = parseInt(width);
        heightValue.innerText = parseInt(height);
    } else if (modifiedObject.id === 'single-arrow') {
        console.log('modification arrow')
    } else {
        return
    }
});

//& –°–æ–±—ã—Ç–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–¥–≤–∏–∂–µ–Ω–∏–∏
canvas.on('object:moving', function (e) {
    var object = canvas.getActiveObject();

    if (object.id === 'shape') {
        //* –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–±—ä–µ–∫—Ç–∞
        var boundingRect = object.getBoundingRect();
        //* –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–ª—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var canvasRect = canvas.getElement().getBoundingClientRect();
        //* –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var objectLeft = boundingRect.left + canvasRect.left;
        var objectTop = boundingRect.top + canvasRect.top;
        //*–¥–æ–±–∞–≤–ª—è–µ–º –≤ shapeMenu —à–∏—Ä–∏–Ω—É –∏ –≤—ã—Å–æ—Ç—É —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        shapeMenu.style.left = objectLeft - 40 + 'px';
        shapeMenu.style.top = objectTop - 90 + 'px';
        shapeMenu.classList.add('active_shape');
    } else if (object.id === 'single-arrow') {
        //* –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–±—ä–µ–∫—Ç–∞
        var boundingRect = object.getBoundingRect();
        //* –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–ª—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var canvasRect = canvas.getElement().getBoundingClientRect();
        //* –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var objectLeft = boundingRect.left + canvasRect.left;
        var objectTop = boundingRect.top + canvasRect.top;
        console.log('arrow')
        elements.arrow_menu.style.left = objectLeft - 40 + 'px';
        elements.arrow_menu.style.top = objectTop - 90 + 'px';
        elements.arrow_menu.classList.add('arrow_visible');
    }

})

canvas.on('object:scaling', () => {
    var object = canvas.getActiveObject();
    if (object.id === 'shape') {
        //* –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        var width = object.width * object.scaleX;
        var height = object.height * object.scaleY;
        widthValue.innerText = parseInt(width);
        heightValue.innerText = parseInt(height);
    }
})

function showShapeMenu() {
    elements.arrow_menu.classList.remove('arrow_visible');
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –æ–±—ä–µ–∫—Ç
    var object = canvas.getActiveObject();

    if (object && object.id === 'shape') {
        //^–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        //* –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–±—ä–µ–∫—Ç–∞
        var boundingRect = object.getBoundingRect();
        //* –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–ª—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var canvasRect = canvas.getElement().getBoundingClientRect();
        //* –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
        var objectLeft = boundingRect.left + canvasRect.left;
        var objectTop = boundingRect.top + canvasRect.top;
        //* –®–∏—Ä–∏–Ω–∞ –∏ –≤—ã—Å–æ—Ç–∞ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
        var width = object.width * object.scaleX;
        var height = object.height * object.scaleY;
        //^–î–µ–π—Å—Ç–≤–∏–µ
        //* –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã shapeMenu –≤—ã—à–µ –æ–±—ä–µ–∫—Ç–∞ –Ω–∞ 90px —Å–¥–≤–∏–≥ –≤–ª–µ–≤–æ 40px
        shapeMenu.style.left = objectLeft - 40 + 'px';
        shapeMenu.style.top = objectTop - 90 + 'px';
        shapeMenu.classList.add('active_shape');
        //* –î–æ–±–∞–≤–ª—è–µ–º –≤ shapeMenu –≤—ã—Å–æ—Ç—ã –∏ —à–∏—Ä–∏–Ω—É —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏ —Ü–≤–µ—Ç –∏–∑ fill picker
        widthValue.innerText = parseInt(width);
        heightValue.innerText = parseInt(height);
        shapeFillPicker.color = object.fill;
    } else {
        return
    }
}

function showArrowMenu() {
    shapeMenu.classList.remove('active_shape');
    var object = canvas.getActiveObject();
    //^–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
    //* –ü–æ–ª—É—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞—é—â–∏–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫ –æ–±—ä–µ–∫—Ç–∞
    var boundingRect = object.getBoundingRect();
    //* –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ö–æ–ª—Å—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
    var canvasRect = canvas.getElement().getBoundingClientRect();
    //* –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –æ–±—ä–µ–∫—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –æ–∫–Ω–∞
    var objectLeft = boundingRect.left + canvasRect.left;
    var objectTop = boundingRect.top + canvasRect.top;
    elements.arrow_menu.style.left = objectLeft - 40 + 'px';
    elements.arrow_menu.style.top = objectTop - 90 + 'px';
    elements.arrow_menu.classList.add('arrow_visible');
}

//* –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ª–∏–≤–∫–∏, –ø–∏–∫–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –æ–±—å–µ–∫—Ç shape
function changeFill(evt) {
    const color = evt.detail.hex8;
    const activeObj = canvas.getActiveObjects();

    activeObj.forEach((obj) => {
        obj.fill = color;
        canvas.renderAll();
    })

    //*–ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ opacity
    const str = evt.detail.hsva;
    const values = str.split(',');
    const opacity = values[values.length - 1].slice(0, -1); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–∫–æ–±–∫—É
    elements.fill_value.innerText = parseInt(opacity * 100) + '%';

}


canvas.on("selection:cleared", () => {
    shapeMenu.classList.remove('active_shape');
    elements.arrow_menu.classList.remove('arrow_visible');
})


function toggleBlockActiveObject() {
    var activeObject = canvas.getActiveObject();
    if (activeObject) {
        if (activeObject.type === 'group' || activeObject.type === 'activeSelection') {
            activeObject.forEachObject(function (object) {
                object.lockMovementX = !object.lockMovementX;
                object.lockMovementY = !object.lockMovementY;
                // object.selectable = !object.selectable;
            });
        } else {
            activeObject.lockMovementX = !activeObject.lockMovementX;
            activeObject.lockMovementY = !activeObject.lockMovementY;
            activeObject.selectable = !activeObject.selectable;
        }
        canvas.discardActiveObject();
        canvas.requestRenderAll();
    }
}
